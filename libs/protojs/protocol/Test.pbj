/*  ProtoJS Serialization Test
 *  Test.pbj
 *
 *  Copyright (c) 2009, Daniel Reiter Horn
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of ProtoJS nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
"pbj-0.0.3"
package ProtoJSTest.PB;
message ExternalMessage {
  message SubMessage {
     optional uuid subuuid=1;
     optional vector3d subvector=2;
     optional duration subduration=3;
     optional normal subnormal=4;
  }
  optional bool is_true=40 [default=true];
  optional vector2f v2f=2;
  optional SubMessage sub_mes=30;
  repeated SubMessage submessers=31;
  optional sha256 sha=32; 
  repeated sha256 shas=33; 
  required vector3f v3f=4;
  repeated vector3f v3ff=5;
}
message TestMessage {
  optional double xxd =20 [default=10.3];
  optional float xxf=21;
  optional uint32 xxu32=22;
  optional int32 xxi32=37;
  optional sint32 xxsi32=38;
  optional string xxs=23;
  optional bytes xxb=24;
  repeated string xxss=25;
  repeated bytes xxbb=26;
  repeated float xxff=27;
  repeated normal xxnn=29;
  required float xxfr=28;
  optional normal n=1;
  optional vector2f v2f=2;
  optional vector2d v2d=3;
  required vector3f v3f=4;
  optional vector3d v3d=5;
  optional vector4f v4f=6;
  optional vector4d v4d=7;
  optional quaternion q=8;
  optional uuid u=9; 
  optional angle a=10;
  optional time t=11;
  optional duration d=12;
  flags32 Flagsf32 {
    UNIVERSA = 0;
    WE = 1;
    IMAGE = 2;
    LOCA = 3;
  }
  optional Flagsf32 f32=13;
  flags64 Flagsf64 {
    UNIVERSAL = 0;
    WEB = 1;
    IMAGES = 2;
    LOCAL = 3;
  }
  enum  Enum32 {
    UNIVERSAL1 = 0;
    WEB1 = 1;
    IMAGES1 = 2;
    LOCAL1 = 3;

  }
  optional Flagsf64 f64=14;
  optional boundingsphere3f bsf=15;
  optional boundingsphere3d bsd=16;
  optional boundingbox3f3f bbf=17;
  optional boundingbox3d3f bbd=18;
  optional Enum32 e32=19;

  message SubMessage {
     optional uuid subuuid=1;
     optional vector3d subvector=2;
     optional duration subduration=3;
     optional normal subnormal=4;
  }
  optional SubMessage submes=30;
  repeated SubMessage submessers=31;
  optional sha256 sha=32; 
  repeated sha256 shas=33; 

  extensions 100 to 199;
  optional ExternalMessage extmes=34;
  repeated ExternalMessage extmessers=35;
  required ExternalMessage extmesser=36;
}
extend TestMessage {
  optional boundingbox3f3f extensionbbox=100;
  optional vector3f extensionvector=101;
}
